//		1	1	1		tl	t	tr
//		1	1	1		l	c	r
//		1	1	1		bl	b	br

/*
static const char * MatrixConvolution =
"uniform float vecKernel[9]; \n"
"uniform sampler2DRect texUnit;\n"
"void main(void)\n"
"{		\n	"	
"	 //------------------------------------------------------------\n"
"	 //Variable													   \n"
"	 //------------------------------------------------------------\n"
"	 vec4 sum = vec4(0.0);\n"
"	 sum += texture2DRect(texUnit, gl_TexCoord[0].xy + vec2(-1, -1)) * vecKernel[0];\n"
"	 sum += texture2DRect(texUnit, gl_TexCoord[0].xy + vec2(0, -1)) * vecKernel[1];\n"
"	 sum += texture2DRect(texUnit, gl_TexCoord[0].xy + vec2(1, -1)) * vecKernel[2];\n"
"	 sum += texture2DRect(texUnit, gl_TexCoord[0].xy + vec2(-1, 0)) * vecKernel[3];\n"
"	 sum += texture2DRect(texUnit, gl_TexCoord[0].xy + vec2(0, 0)) * vecKernel[4];\n"
"	 sum += texture2DRect(texUnit, gl_TexCoord[0].xy + vec2(1, 0)) * vecKernel[5];\n"
"	 sum += texture2DRect(texUnit, gl_TexCoord[0].xy + vec2(-1, 1)) * vecKernel[6];\n"
"	 sum += texture2DRect(texUnit, gl_TexCoord[0].xy + vec2(0, 1)) * vecKernel[7];\n"
"	 sum += texture2DRect(texUnit, gl_TexCoord[0].xy + vec2(1, 1)) * vecKernel[8];\n"
"	 gl_FragColor = sum / factor;\n"
"}																	";
*/


static const char * MatrixConvolution = {
"uniform float Koffset; \n"
"uniform float Kfactor; \n"
"uniform int Ksize; \n"
"uniform float vecKernel[49]; \n"
"uniform sampler2DRect texUnit;\n"
"void main(void)\n"
"{																   \n "	
"	 //------------------------------------------------------------\n "
"	 //Variable													   \n "
"	 //------------------------------------------------------------\n "
"	 vec4 sum = vec4(0.0);\n"
"	 sum += texture2DRect(texUnit, gl_TexCoord[0].st + vec2(-1.0, -1.0)) * vecKernel[0];\n"
"	 sum += texture2DRect(texUnit, gl_TexCoord[0].st + vec2(0.0, -1.0)) * vecKernel[1];\n"
"	 sum += texture2DRect(texUnit, gl_TexCoord[0].st + vec2(1.0, -1.0)) * vecKernel[2];\n"
"	 sum += texture2DRect(texUnit, gl_TexCoord[0].st + vec2(-1.0, 0.0)) * vecKernel[3];\n"
"	 sum += texture2DRect(texUnit, gl_TexCoord[0].st + vec2(0.0, 0.0)) * vecKernel[4];\n"
"	 sum += texture2DRect(texUnit, gl_TexCoord[0].st + vec2(1.0, 0.0)) * vecKernel[5];\n"
"	 sum += texture2DRect(texUnit, gl_TexCoord[0].st + vec2(-1.0, 1.0)) * vecKernel[6];\n"
"	 sum += texture2DRect(texUnit, gl_TexCoord[0].st + vec2(0.0, 1.0)) * vecKernel[7];\n"
"	 sum += texture2DRect(texUnit, gl_TexCoord[0].st + vec2(1.0, 1.0)) * vecKernel[8];\n"
"  gl_FragColor = min((sum / vec4(Kfactor)),1.0) + vec4(Koffset);\n"
"}																	"};

static const char * MedianShaderSource = {
"void s2(out vec4 a,out vec4 b);\n"
"void mn3(out vec4 a,out vec4 b,out vec4 c);\n"
"void mx3(out vec4 a,out vec4 b,out vec4 c);\n"
"void mnmx3(out vec4 a,out vec4 b,out vec4 c);\n"
"void mnmx4(out vec4 a,out vec4 b,out vec4 c, out vec4 d);\n"
"void mnmx5(out vec4 a,out vec4 b,out vec4 c, out vec4 d, out vec4 e);\n"
"void mnmx6(out vec4 a,out vec4 b,out vec4 c, out vec4 d, out vec4 e, out vec4 f);\n"

"void s2(out vec4 a,out vec4 b)\n"
"{\n"
"	vec4 temp = a; \n"
"	a = min(a, b); \n"
"	b = max(temp, b);\n"
"}\n"
"void mn3(out vec4 a,out vec4 b,out vec4 c)\n"
"{\n"
"	s2(a, b); \n"
"	s2(a, c); \n"
"}\n"
"void mx3(out vec4 a,out vec4 b,out vec4 c)\n"
"{\n"
"	s2(b, c); \n"
"	s2(a, c); \n"
"}\n"
"void mnmx3(out vec4 a,out vec4 b,out vec4 c)\n"
"{\n"
"	mx3(a, b, c); \n"
"	s2(a, b); \n"
"}\n"
"void mnmx4(out vec4 a,out vec4 b,out vec4 c, out vec4 d)\n"
"{\n"
"	s2(a, b); s2(c, d); s2(a, c); s2(b, d); \n"
"}\n"
"void mnmx5(out vec4 a,out vec4 b,out vec4 c, out vec4 d, out vec4 e)\n"
"{\n"
"	s2(a, b); s2(c, d); mn3(a, c, e); mx3(b, d, e);  \n"
"}\n"
"void mnmx6(out vec4 a,out vec4 b,out vec4 c, out vec4 d, out vec4 e, out vec4 f)\n"
"{\n"
"	s2(a, d); s2(b, e); s2(c, f); mn3(a, b, c); mx3(d, e, f);  \n"
"}\n"
""
""
"uniform sampler2DRect texUnit;\n"
"void main(void)\n"
"{																	  "	
"	 vec4 kernel[9];\n"
"	 kernel[0] = texture2DRect(texUnit, gl_TexCoord[0].xy + vec2(-1, -1));\n"
"	 kernel[1] = texture2DRect(texUnit, gl_TexCoord[0].xy + vec2(0, -1));\n"
"	 kernel[2] = texture2DRect(texUnit, gl_TexCoord[0].xy + vec2(1, -1));\n"
"	 kernel[3] = texture2DRect(texUnit, gl_TexCoord[0].xy + vec2(-1, 0));\n"
"	 kernel[4] = texture2DRect(texUnit, gl_TexCoord[0].xy + vec2(0, 0));\n"
"	 kernel[5] = texture2DRect(texUnit, gl_TexCoord[0].xy + vec2(1, 0));\n"
"	 kernel[6] = texture2DRect(texUnit, gl_TexCoord[0].xy + vec2(-1, 1));\n"
"	 kernel[7] = texture2DRect(texUnit, gl_TexCoord[0].xy + vec2(0, 1));\n"
"	 kernel[8] = texture2DRect(texUnit, gl_TexCoord[0].xy + vec2(1, 1));\n"
""
"  // Starting with a subset of size 6, remove the min and max each time\n"
"  mnmx6(kernel[0], kernel[1], kernel[2], kernel[3], kernel[4], kernel[5]);\n"
"  mnmx5(kernel[1], kernel[2], kernel[3], kernel[4], kernel[6]);\n"
"  mnmx4(kernel[2], kernel[3], kernel[4], kernel[7]);\n"
"  mnmx3(kernel[3], kernel[4], kernel[8]);\n"
"  gl_FragColor = kernel[4];\n"
"\n"
"}																	"};